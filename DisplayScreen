
class ContourScreen extends StatefulWidget {
  final Note note;
  ContourScreen(this.note);


  @override
  State<StatefulWidget> createState() => new _ContourScreenState();
}

class _ContourScreenState extends State<ContourScreen> with TickerProviderStateMixin{
 //double downloadPercentage = 0.0;


  Future<void> _launchInBrowser(String url) async {
    if (await canLaunch(url)) {
      await launch(
        url,
        forceSafariVC: false,
        forceWebView: false,
        headers: <String, String>{'my_header_key': 'my_header_value'},
      );
    } else {
      throw 'Could not launch $url';
    }
  }

  Future<void> _launchUniversalLinkIos(String url) async {
    if (await canLaunch(url)) {
      final bool nativeAppLaunchSucceeded = await launch(
        url,
        forceSafariVC: false,
        universalLinksOnly: true,
      );
      if (!nativeAppLaunchSucceeded) {
        await launch(
          url,
          forceSafariVC: true,
        );
      }
    }
  }

  GifController controller1,controller2,controller3,controller4;

  @override
  void initState() {
    // TODO: implement initState
    controller1 = GifController(vsync: this);
    controller2 = GifController(vsync: this);
    controller4= GifController(vsync: this);
    WidgetsBinding.instance.addPostFrameCallback((_){
      controller1.repeat(min: 0,max: 53,period: Duration(milliseconds: 200));
    });
    WidgetsBinding.instance.addPostFrameCallback((_){
      controller2.repeat(min: 0,max: 13,period: Duration(milliseconds: 200));
      controller4.repeat(min: 0,max: 13,period: Duration(milliseconds: 200));
    });
    controller3 = GifController(vsync: this,duration: Duration(milliseconds: 200),reverseDuration: Duration(milliseconds: 200));
    super.initState();
  }

  @override
  dispose() {
    controller4.dispose();
    controller1.dispose();
    controller2.dispose();
    controller3.dispose(); // you need this
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {
    //Provider(create: (_) => LoadingProvider(), child: GifImage());
   final loadingProvider = Provider.of<LoadingProvider>(context);
    return  Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(),
        
      body: Scrollbar(
        child: SingleChildScrollView(
          child: Container(

            child: Padding(
              padding: const EdgeInsets.only(left: 20.0, right: 20.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                 
                  ChangeNotifierProvider<ValueNotifier<int>>(
                      create: (context) => ValueNotifier<int>(0),
                  child: Text('${loadingProvider.downloadPercentage}'),),
                  
                     /*
                   ValueListenableBuilder<int>(
                    valueListenable: ValueProvider().downloadPercentage,
                    builder: (context,value, _){
                      return
                        LoadingProvider().downloadPercentage !=1 ? AnimatedBuilder(animation: ValueProvider().downloadPercentage,  builder: (BuildContext context, Widget child) {
                          return Container(child: LinearProgressIndicator(),
                          );
                        },): Container();
                    },
                  ),


                  //Text(Provider.of<LoadingProvider>(context).downloadPercentage.toString()),

                  Consumer<LoadingProvider>(builder: (context, loadingProvider, _){
                    return Text(loadingProvider.downloadPercentage.toString());
                  }),
                   */


                  //loadingProvider.downloadPercentage !=1.0 ? SizedBox(height: MediaQuery.of(context).size.height*0.2, width: MediaQuery.of(context).size.width,child: LinearProgressIndicator()):Container(),
                  if(widget.note.animation!=''&&widget.note.frames !='') Card(
                    semanticContainer: true,
                    clipBehavior: Clip.antiAliasWithSaveLayer,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: GifImage(
                      controller: controller3,
                      image: NetworkImage(widget.note.animation),
                    ),
                  ),


                  if(widget.note.frames!='') Slider(
                    onChanged: (v){
                      controller3.value = v;
                      setState(() {
                      });
                    },
                    max: double.parse(widget.note.ref2label),
                    min: 0,
                    value: controller3.value,
                    activeColor: colorFontHighlight,
                    inactiveColor: colorFontHighlightAlt,
                  ),
                 

                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}



